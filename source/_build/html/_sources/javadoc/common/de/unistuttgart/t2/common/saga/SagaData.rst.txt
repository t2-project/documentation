SagaData
========

.. java:package:: de.unistuttgart.t2.common.saga
   :noindex:

.. java:type:: public class SagaData

   All the Information that any saga participant might possibly need.

   Payment wants:

   ..

   * the information usually found on a credit card
   * the total money to pay

   Inventory wants:

   ..

   * the sessionId to identify the reservations to commit / delete.

   Order wants:

   ..

   * nothing really
   * but takes total and sessionId anyway.

   Another option would be, that each saga participant collects its data from other services personally (e.g. payment again asks cart for which and what quantity of items were bought), but that is a lot of communication effort. To avoid this there is just this one big messages, that contains all information and every one just picks what they need.

Constructors
------------
SagaData
^^^^^^^^

.. java:constructor:: public SagaData(String cardNumber, String cardOwner, String checksum, String sessionId, String orderId, double total)
   :outertype: SagaData

SagaData
^^^^^^^^

.. java:constructor:: public SagaData(String cardNumber, String cardOwner, String checksum, String sessionId, double total)
   :outertype: SagaData

SagaData
^^^^^^^^

.. java:constructor:: public SagaData()
   :outertype: SagaData

Methods
-------
getCardNumber
^^^^^^^^^^^^^

.. java:method:: public String getCardNumber()
   :outertype: SagaData

getCardOwner
^^^^^^^^^^^^

.. java:method:: public String getCardOwner()
   :outertype: SagaData

getChecksum
^^^^^^^^^^^

.. java:method:: public String getChecksum()
   :outertype: SagaData

getOrderId
^^^^^^^^^^

.. java:method:: public String getOrderId()
   :outertype: SagaData

getSessionId
^^^^^^^^^^^^

.. java:method:: public String getSessionId()
   :outertype: SagaData

getTotal
^^^^^^^^

.. java:method:: public double getTotal()
   :outertype: SagaData

setOrderId
^^^^^^^^^^

.. java:method:: public void setOrderId(String orderId)
   :outertype: SagaData

